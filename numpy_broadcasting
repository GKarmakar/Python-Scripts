#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Mar 11 17:54:11 2018

@author: trinakarmakar
"""

import numpy as np
a = np.array([1,2,3])
b = 2
c = a + b
print(c)
a = np.array([[1,2,3], [4,5,6]])
print(a)
b = 2
c = a + b
print(c)

b = np.array([1,2,3])

c = a + b
print(c)
#a = 3X2 dim array
#b = 1X2 dim array
b = np.array([1,2]) 
print(b)
#c = a + b #this will throw error
print(c)

a = np.array([1.0, 2.0, 3.0])
b = np.array([2.0, 2.0, 2.0])

print(a * b)

b = 2.0
print(a * b)


"""
General Broadcasting Rules
When operating on two arrays, NumPy compares their shapes element-wise. It starts with the trailing dimensions, and works its way forward. Two dimensions are compatible when

they are equal, or
one of them is 1
If these conditions are not met, a ValueError: frames are not aligned exception is thrown, indicating that the arrays have incompatible shapes. The size of the resulting array is the maximum size along each dimension of the input arrays.

Arrays do not need to have the same number of dimensions. For example, if you have a 256x256x3 array of RGB values, and you want to scale each color in the image by a different value, you can multiply the image by a one-dimensional array with 3 values. Lining up the sizes of the trailing axes of these arrays according to the broadcast rules, shows that they are compatible:

Image  (3d array): 256 x 256 x 3
Scale  (1d array):             3
Result (3d array): 256 x 256 x 3
When either of the dimensions compared is one, the other is used. In other words, dimensions with size 1 are stretched or “copied” to match the other.

In the following example, both the A and B arrays have axes with length one that are expanded to a larger size during the broadcast operation:

A      (4d array):  8 x 1 x 6 x 1
B      (3d array):      7 x 1 x 5
Result (4d array):  8 x 7 x 6 x 5
Here are some more examples:

A      (2d array):  5 x 4
B      (1d array):      1
Result (2d array):  5 x 4

A      (2d array):  5 x 4
B      (1d array):      4
Result (2d array):  5 x 4

A      (3d array):  15 x 3 x 5
B      (3d array):  15 x 1 x 5
Result (3d array):  15 x 3 x 5

A      (3d array):  15 x 3 x 5
B      (2d array):       3 x 5
Result (3d array):  15 x 3 x 5

A      (3d array):  15 x 3 x 5
B      (2d array):       3 x 1
Result (3d array):  15 x 3 x 5
Here are examples of shapes that do not broadcast:

A      (1d array):  3
B      (1d array):  4 # trailing dimensions do not match

A      (2d array):      2 x 1
B      (3d array):  8 x 4 x 3 # second from last dimensions mismatched
"""

x = np.arange(4)
print(x)
xx = x.reshape(4,1)
print(xx)
y = np.ones(5)
print(y)
z = np.ones((3,4))
print(z)
print("shape of x", x.shape)
print("shape of y", y.shape)
print("shape of xx", xx.shape)
#print(x + y) wil throw error

print((xx + y).shape)

print(xx + y)

z = np.ones((3,4))
print("shape of z", z.shape)
print((x + z).shape)
print("value of x", x)
print("value of z", z)
print("value of x + z", x + z)

"""
Broadcasting provides a convenient way of taking the outer product (or any other outer operation) of two arrays. The following example shows an outer addition operation of two 1-d arrays:
"""

a = np.array([0.0, 10.0, 20.0, 30.0])
print(a.shape)
b = np.array([1.0, 2.0, 3.0])
print(a[:, np.newaxis].shape)
print(a[:, np.newaxis] + b)

"""
Here the newaxis index operator inserts a new axis into a, making it a two-dimensional 4x1 array. Combining the 4x1 array with b, which has shape (3,), yields a 4x3 array.
"""
### References: http://scipy.github.io/old-wiki/pages/EricsBroadcastingDoc
### https://docs.scipy.org/doc/numpy-1.13.0/user/basics.broadcasting.html
### https://machinelearningmastery.com/broadcasting-with-numpy-arrays/


